<span class="irc-date">[0:02]</span> <span class="irc-green">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) has joined #ioke</span><br />
<span class="irc-date">[1:20]</span> <span class="irc-navy">* cv (n=cv@5acb0c77.bb.sky.com) Quit ()</span><br />
<span class="irc-date">[1:22]</span> <span class="irc-green">* wavis (i=4526d11e@gateway/web/ajax/mibbit.com/x-2e4931a897cdf62a) has joined #ioke</span><br />
<span class="irc-date">[1:26]</span> <span class="irc-black">&lt;wavis&gt; hey anybody active currently? or is it too late in other parts of the world?</span><br />
<span class="irc-date">[1:56]</span> <span class="irc-navy">* wavis (i=4526d11e@gateway/web/ajax/mibbit.com/x-2e4931a897cdf62a) Quit ("<a href="http://www.mibbit.com">http://www.mibbit.com</a> ajax IRC Client")</span><br />
<span class="irc-date">[3:09]</span> <span class="irc-green">* [azoic] (n=azoic@adsl-75-37-30-217.dsl.pltn13.sbcglobal.net) has joined #ioke</span><br />
<span class="irc-date">[4:12]</span> <span class="irc-navy">* andreaja (n=sodoff@65.111.170.77) Quit (wolfe.freenode.net irc.freenode.net)</span><br />
<span class="irc-date">[4:14]</span> <span class="irc-green">* andreaja (n=sodoff@65.111.170.77) has joined #ioke</span><br />
<span class="irc-date">[4:39]</span> <span class="irc-green">* [azoic] (n=azoic@adsl-75-37-30-217.dsl.pltn13.sbcglobal.net) has left #ioke</span><br />
<span class="irc-date">[4:41]</span> <span class="irc-navy">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) Quit ()</span><br />
<span class="irc-date">[5:18]</span> <span class="irc-green">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) has joined #ioke</span><br />
<span class="irc-date">[5:46]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) has joined #ioke</span><br />
<span class="irc-date">[6:18]</span> <span class="irc-navy">* olabini (n=ola@c-224ce155.1110-8-64736c13.cust.bredbandsbolaget.se) Quit (Read error: 110 (Connection timed out))</span><br />
<span class="irc-date">[7:25]</span> <span class="irc-green">* cv (n=cv@5acb0c77.bb.sky.com) has joined #ioke</span><br />
<span class="irc-date">[7:43]</span> <span class="irc-navy">* cv (n=cv@5acb0c77.bb.sky.com) Quit ()</span><br />
<span class="irc-date">[7:58]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) Quit ()</span><br />
<span class="irc-date">[8:30]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[8:30]</span> <span class="irc-green">* martyn4 (n=Martyn@195.47.79.66) has joined #ioke</span><br />
<span class="irc-date">[8:51]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) Quit (Remote closed the connection)</span><br />
<span class="irc-date">[8:52]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[9:20]</span> <span class="irc-green">* vborja (n=vborja@minotaur.apache.org) has joined #ioke</span><br />
<span class="irc-date">[9:24]</span> <span class="irc-green">* olabini (n=ola@194.132.20.9) has joined #ioke</span><br />
<span class="irc-date">[9:24]</span> <span class="irc-green">* ChanServ sets mode +o olabini </span><br />
<span class="irc-date">[9:37]</span> <span class="irc-black">&lt;melwin&gt; Hey.</span><br />
<span class="irc-date">[9:49]</span> <span class="irc-green">* rfgpfeiffer_ (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[9:58]</span> <span class="irc-black">&lt;olabini&gt; hellu</span><br />
<span class="irc-date">[9:58]</span> <span class="irc-black">&lt;slava&gt; hi olabini</span><br />
<span class="irc-date">[10:04]</span> <span class="irc-green">* rfgpfeiffer__ (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[10:04]</span> <span class="irc-navy">* rfgpfeiffer_ (n=rfgpfeif@141.89.226.149) Quit (Read error: 110 (Connection timed out))</span><br />
<span class="irc-date">[10:05]</span> <span class="irc-green">* naeu_ (n=sam@h253136.upc-h.chello.nl) has joined #ioke</span><br />
<span class="irc-date">[10:06]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) Quit (Read error: 110 (Connection timed out))</span><br />
<span class="irc-date">[10:08]</span> <span class="irc-black">&lt;olabini&gt; slava: how are you?</span><br />
<span class="irc-date">[10:08]</span> <span class="irc-black">&lt;slava&gt; good, you?</span><br />
<span class="irc-date">[10:09]</span> <span class="irc-black">&lt;olabini&gt; pretty good. sitting at client site at the moment, though</span><br />
<span class="irc-date">[10:12]</span> <span class="irc-black">&lt;naeu_&gt; olabini: I'm not sure what you have in mind for the gem-like system for ioke, but reading this <a href="http://blog.segment7.net/articles/2009/02/04/a-rubygems-github-proposal">http://blog.segment7.net/articles/2009/02/04/a-rubygems-github-proposal</a> suggest a distributed approach would be sensible</span><br />
<span class="irc-date">[10:12]</span> <span class="irc-black">&lt;naeu_&gt; one of the comments suggests using urls as names</span><br />
<span class="irc-date">[10:13]</span> <span class="irc-black">&lt;olabini&gt; hmm. interesting.</span><br />
<span class="irc-date">[10:13]</span> <span class="irc-black">&lt;olabini&gt; will read</span><br />
<span class="irc-date">[10:26]</span> <span class="irc-black">&lt;slava&gt; olabini: what type of software do you want to write with ioke?</span><br />
<span class="irc-date">[10:26]</span> <span class="irc-black">&lt;olabini&gt; that's a good question. I don't have a particular goal, really.</span><br />
<span class="irc-date">[10:27]</span> <span class="irc-black">&lt;olabini&gt; at the moment, the niche is probably quite Ruby-like</span><br />
<span class="irc-date">[10:27]</span> <span class="irc-black">&lt;olabini&gt; embedding and so on</span><br />
<span class="irc-date">[10:27]</span> <span class="irc-black">&lt;olabini&gt; pushing the borders on what can be done with DSLs is also an important part of it</span><br />
<span class="irc-date">[10:27]</span> <span class="irc-black">&lt;slava&gt; do you plan on making the parser extensible, or just making method dispatch as flexible as possible?</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;slava&gt; is the latter mostly your vehicle for DSLs so far?</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;olabini&gt; I'll probably keep the parser static</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;olabini&gt; and yes, it is</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;slava&gt; so we won't see xml literals? :)</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;olabini&gt; except that method dispatch is a narrow way of looking at it</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;olabini&gt; since the runtime macros really can do whatever they want</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;slava&gt; do they always expand at runtime?</span><br />
<span class="irc-date">[10:28]</span> <span class="irc-black">&lt;olabini&gt; and no, we won't see xml literals. I can guarantee you that. =)</span><br />
<span class="irc-date">[10:29]</span> <span class="irc-black">&lt;olabini&gt; at the moment. I've thought about adding some kind of parse time macro facility</span><br />
<span class="irc-date">[10:29]</span> <span class="irc-black">&lt;slava&gt; in factor we have a library that adds xml literals :)</span><br />
<span class="irc-date">[10:29]</span> <span class="irc-black">&lt;olabini&gt; I do have syntax macros that lazily expand themselves the first time encountered.</span><br />
<span class="irc-date">[10:29]</span> <span class="irc-black">&lt;olabini&gt; right</span><br />
<span class="irc-date">[10:30]</span> <span class="irc-black">&lt;slava&gt; will you have multiple dispatch?</span><br />
<span class="irc-date">[10:31]</span> <span class="irc-black">&lt;olabini&gt; probably not, since the object orientedness of the core system is one of the differentiators against Lisp</span><br />
<span class="irc-date">[10:31]</span> <span class="irc-black">&lt;olabini&gt; it's one of the things that I really like actually</span><br />
<span class="irc-date">[10:37]</span> <span class="irc-black">&lt;slava&gt; how do you deal with adding operations on existing types?</span><br />
<span class="irc-date">[10:44]</span> <span class="irc-black">&lt;olabini&gt; well, it's all dynamically typed, so you can add new operations at any time</span><br />
<span class="irc-date">[10:44]</span> <span class="irc-black">&lt;slava&gt; what about clashes if two modules add a method with the same name to a builtin class like Integer?</span><br />
<span class="irc-date">[10:45]</span> <span class="irc-black">&lt;olabini&gt; yeah, it can happen. same as with Ruby</span><br />
<span class="irc-date">[10:45]</span> <span class="irc-black">&lt;slava&gt; that's my main argument in favor of generic functions and multiple dispatch, this issue becomes impossible</span><br />
<span class="irc-date">[10:46]</span> <span class="irc-black">&lt;naeu_&gt; slava: are generic functions the kind that let include the parameters as part of the signature of the function?</span><br />
<span class="irc-date">[10:47]</span> <span class="irc-black">&lt;slava&gt; sort of, yeah</span><br />
<span class="irc-date">[10:47]</span> <span class="irc-black">&lt;naeu_&gt; hence letting you override a given name and attach different functionality to calls with different parameter arities/types</span><br />
<span class="irc-date">[10:48]</span> <span class="irc-black">&lt;naeu_&gt; or am I blurring multiple dispatch and generic functions based on naivety? :-)</span><br />
<span class="irc-date">[10:49]</span> <span class="irc-black">&lt;slava&gt; well, with multiple dispatch you can have geneic functions that dispatch on more than one parameter</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; so</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; yeah, it's a good argument, but of course that means that you can never override existing behavior</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; once you allow those overridings to happen</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; even generic functions doesn't help you</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; the only reason the above argument works is because languages like Common Lisp have method combinators</span><br />
<span class="irc-date">[10:50]</span> <span class="irc-black">&lt;olabini&gt; plus the core types have functions that aren't exposed as generic functions</span><br />
<span class="irc-date">[10:51]</span> <span class="irc-black">&lt;olabini&gt; of course, in Ioke if you're worried about that, you don't need to do a permanent change</span><br />
<span class="irc-date">[10:51]</span> <span class="irc-black">&lt;olabini&gt; Ioke has a let-macro that among other things works a bit like categories</span><br />
<span class="irc-date">[10:52]</span> <span class="irc-black">&lt;olabini&gt; so you can change or add a method to a core type temporarily</span><br />
<span class="irc-date">[10:52]</span> <span class="irc-black">&lt;slava&gt; temporarily in what sense? dynamically scoped?</span><br />
<span class="irc-date">[10:52]</span> <span class="irc-black">&lt;slava&gt; or globally for a temporary period of t ime</span><br />
<span class="irc-date">[10:55]</span> <span class="irc-black">&lt;olabini&gt; dynamically scoped, which translates to globally for a temporary time</span><br />
<span class="irc-date">[10:55]</span> <span class="irc-black">&lt;olabini&gt; whoops, that didn't make sense</span><br />
<span class="irc-date">[10:55]</span> <span class="irc-black">&lt;olabini&gt; dynamically scoped in the Lisp sense</span><br />
<span class="irc-date">[10:55]</span> <span class="irc-black">&lt;olabini&gt; which is a global change, yes.</span><br />
<span class="irc-date">[10:55]</span> <span class="irc-black">&lt;slava&gt; well, if you have threads then dynamic scope is not the same as a temporary change to a global cell</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;olabini&gt; that really depends on how you handle dynamic scope</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;olabini&gt; what you say is true for some lisps, but not all of them</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;olabini&gt; it's just that most Lisp compilers does it that way because it's the most efficient solution</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;olabini&gt; the problem is that it gets hard to reason about it when you have several threads that see the same dynamic scope</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;melwin&gt; slava: I'm curious, what's the largest use of Factor today? I think it's a cool language, and I'm interested in how corporations, for instance, "allow" other languages than Java etc. Any production uses of Factor yet?</span><br />
<span class="irc-date">[10:56]</span> <span class="irc-black">&lt;olabini&gt; as you probably already know</span><br />
<span class="irc-date">[10:57]</span> <span class="irc-black">&lt;slava&gt; olabini: yeah, shallow binding is more efficient, but I think its too problematic</span><br />
<span class="irc-date">[10:57]</span> <span class="irc-black">&lt;slava&gt; deep binding is dynamic scope "done right". you don't want threads to modify the same scope</span><br />
<span class="irc-date">[10:57]</span> <span class="irc-black">&lt;slava&gt; melwin: people use it for scripting and to write web apps</span><br />
<span class="irc-date">[10:57]</span> <span class="irc-black">&lt;olabini&gt; true</span><br />
<span class="irc-date">[10:58]</span> <span class="irc-black">&lt;olabini&gt; well, I haven't tackled the problem of threads yet. Ioke is so far totally non-concurrent</span><br />
<span class="irc-date">[10:58]</span> <span class="irc-black">&lt;olabini&gt; so we will see how I handle that. =)</span><br />
<span class="irc-date">[10:58]</span> <span class="irc-black">&lt;slava&gt; do you plan on adding continuations?</span><br />
<span class="irc-date">[10:59]</span> <span class="irc-black">&lt;melwin&gt; slava: Thanks.</span><br />
<span class="irc-date">[10:59]</span> <span class="irc-black">&lt;slava&gt; melwin: also all of the project infrastructure, like the web site, wiki, pastebin, continuous integration, etc is written in factor. we don't use apache or anything. but you can ask these questions in #concatenative, instaed of here</span><br />
<span class="irc-date">[11:01]</span> <span class="irc-black">&lt;melwin&gt; slava: Yes, of course, thanks.</span><br />
<span class="irc-date">[11:01]</span> <span class="irc-black">&lt;slava&gt; olabini: do you plan on adding continuations?</span><br />
<span class="irc-date">[11:01]</span> <span class="irc-black">&lt;slava&gt; oh I already asked that, oops</span><br />
<span class="irc-date">[11:02]</span> <span class="irc-black">&lt;olabini&gt; slava: nope</span><br />
<span class="irc-date">[11:02]</span> <span class="irc-black">&lt;olabini&gt; they are just not fun to add in the JVM at the moment =)</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;slava&gt; well,you can implement a trampoline :)</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;olabini&gt; I was thinking about doing the interpreter in a CPS styyle</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;olabini&gt; style</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;olabini&gt; but the problem then will be interoperability with Java</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;olabini&gt; which is a huge value add for the language</span><br />
<span class="irc-date">[11:03]</span> <span class="irc-black">&lt;olabini&gt; I thought about trampolines, but they have the same problem</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; also, there's the whole problem of how handle unwinding. I don't like the Scheme solution</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;slava&gt; well, I'd have the same problem with Factor -&gt; C -&gt; Factor calls, except I solved it ;)</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; yeah, but you have it easier</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;slava&gt; not really. I don't mess with the C frames</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; you can manipulate the stack if you want</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; oh yeah?</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;slava&gt; the C -&gt; Factor call appears to be a new thread at the language level</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; right</span><br />
<span class="irc-date">[11:04]</span> <span class="irc-black">&lt;olabini&gt; hmmmmm</span><br />
<span class="irc-date">[11:05]</span> <span class="irc-black">&lt;slava&gt; so a continuation stops at the innermost C callback</span><br />
<span class="irc-date">[11:05]</span> <span class="irc-black">&lt;olabini&gt; I see</span><br />
<span class="irc-date">[11:05]</span> <span class="irc-black">&lt;olabini&gt; well, the other problem I had with trampolines and CPS is my Condition system</span><br />
<span class="irc-date">[11:05]</span> <span class="irc-black">&lt;olabini&gt; I'm not sure how to make that work seamlessly</span><br />
<span class="irc-date">[11:05]</span> <span class="irc-black">&lt;olabini&gt; especially since invoking restarts is akin to a non-local transfer of control</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;slava&gt; well, restarts are something that you can implement with continuations :)</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; not being able to call a restart over Java boundaries would severele limit the usefullness</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;slava&gt; ah</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; exactly</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; I did think about doing that</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;slava&gt; but when would Java boundaries come up? AWT calling back into an event handler, and such?</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; yeah</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; it's VERY common</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; we do it in JRuby all the time</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; that's basically the best way to work with Java.</span><br />
<span class="irc-date">[11:06]</span> <span class="irc-black">&lt;olabini&gt; implement interfaces/abstract classes and send the code back in</span><br />
<span class="irc-date">[11:07]</span> <span class="irc-black">&lt;olabini&gt; it usually ends up being several levels of that</span><br />
<span class="irc-date">[11:07]</span> <span class="irc-black">&lt;olabini&gt; this is how the dispatching of Rails code from Java application servers work, for example</span><br />
<span class="irc-date">[11:08]</span> <span class="irc-black">&lt;slava&gt; yeah</span><br />
<span class="irc-date">[11:08]</span> <span class="irc-black">&lt;slava&gt; fair enough then</span><br />
<span class="irc-date">[11:09]</span> <span class="irc-black">&lt;slava&gt; I'm going to sleep; take care</span><br />
<span class="irc-date">[11:13]</span> <span class="irc-black">&lt;olabini&gt; see you later</span><br />
<span class="irc-date">[11:33]</span> <span class="irc-navy">* rfgpfeiffer__ (n=rfgpfeif@141.89.226.149) Quit ()</span><br />
<span class="irc-date">[11:44]</span> <span class="irc-navy">* vborja (n=vborja@minotaur.apache.org) Quit (Remote closed the connection)</span><br />
<span class="irc-date">[12:21]</span> <span class="irc-green">* simcitizzon (i=18ba4145@gateway/web/ajax/mibbit.com/x-42d6af0cd054086e) has joined #ioke</span><br />
<span class="irc-date">[12:29]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[12:44]</span> <span class="irc-green">* simcitizzon (i=18ba4145@gateway/web/ajax/mibbit.com/x-42d6af0cd054086e) has left #ioke</span><br />
<span class="irc-date">[13:17]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) Quit (Read error: 110 (Connection timed out))</span><br />
<span class="irc-date">[13:30]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[14:34]</span> <span class="irc-navy">* olabini (n=ola@194.132.20.9) Quit (Read error: 110 (Connection timed out))</span><br />
<span class="irc-date">[15:04]</span> <span class="irc-navy">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) Quit ()</span><br />
<span class="irc-date">[15:06]</span> <span class="irc-navy">* adakkak_ (n=adakkak@c-98-212-194-70.hsd1.il.comcast.net) Quit ()</span><br />
<span class="irc-date">[15:12]</span> <span class="irc-navy">* martyn4 (n=Martyn@195.47.79.66) Quit ("Leaving")</span><br />
<span class="irc-date">[15:14]</span> <span class="irc-green">* mkrauskopf (n=mkrausko@195.47.79.66) has joined #ioke</span><br />
<span class="irc-date">[15:27]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) Quit (Read error: 104 (Connection reset by peer))</span><br />
<span class="irc-date">[15:28]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) has joined #ioke</span><br />
<span class="irc-date">[15:30]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@141.89.226.149) Quit (Client Quit)</span><br />
<span class="irc-date">[15:40]</span> <span class="irc-green">* olabini (n=ola@c-224ce155.1110-8-64736c13.cust.bredbandsbolaget.se) has joined #ioke</span><br />
<span class="irc-date">[15:40]</span> <span class="irc-green">* ChanServ sets mode +o olabini </span><br />
<span class="irc-date">[15:46]</span> <span class="irc-green">* [azoic] (n=azoic@adsl-75-37-30-217.dsl.pltn13.sbcglobal.net) has joined #ioke</span><br />
<span class="irc-date">[16:23]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) has joined #ioke</span><br />
<span class="irc-date">[17:28]</span> <span class="irc-black">&lt;naeu_&gt; olabini: looking at <a href="http://bc.tech.coop/blog/081201.html">http://bc.tech.coop/blog/081201.html</a> I have to wonder why you're even considering adding concurrency support to Ioke</span><br />
<span class="irc-date">[17:28]</span> <span class="irc-black">&lt;naeu_&gt; i.e. what would be the real value?</span><br />
<span class="irc-date">[17:29]</span> <span class="irc-black">&lt;slava&gt; depends on what olabini's goals for Ioke are I guess</span><br />
<span class="irc-date">[17:29]</span> <span class="irc-black">&lt;naeu_&gt; slava: indeed :-)</span><br />
<span class="irc-date">[17:29]</span> <span class="irc-black">&lt;naeu_&gt; it just feels to me that such a flexible, dynamic language belongs in its own process safe and sound</span><br />
<span class="irc-date">[17:30]</span> <span class="irc-black">&lt;naeu_&gt; but i am really interested in anyone's views on this matter, particularly ola's</span><br />
<span class="irc-date">[17:31]</span> <span class="irc-black">&lt;slava&gt; want to hear my view?</span><br />
<span class="irc-date">[17:31]</span> <span class="irc-black">&lt;naeu_&gt; most definitely</span><br />
<span class="irc-date">[17:31]</span> <span class="irc-black">&lt;naeu_&gt; it would be an honour, in fact</span><br />
<span class="irc-date">[17:32]</span> <span class="irc-black">&lt;slava&gt; multicore concurrency is essential, and not the wussy shared-nothing kind. oh, throw in a fast native compiler while you're at it too ;-)</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;naeu_&gt; what's wrong with the functional-fundamentalist view of share nothing immutable variables?</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;slava&gt; its not actually functional-fundamentalist</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;slava&gt; haskell has data-parallel arrays and STM for instance</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;slava&gt; I already had this discussion with some guy in #jruby the other day :)</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;slava&gt; basically message passing doesn't work for some problems; say you want to parallelize a matrix multiplication</span><br />
<span class="irc-date">[17:33]</span> <span class="irc-black">&lt;slava&gt; are you going to copy bits of the matrix around between processes? no</span><br />
<span class="irc-date">[17:34]</span> <span class="irc-black">&lt;slava&gt; you're going to have multiple threads operating on the same matrix, eah thread working on a dfiferent chunk and mutating the result array in place</span><br />
<span class="irc-date">[17:34]</span> <span class="irc-black">&lt;slava&gt; or what if you want to have a shared cache? well a concurrent hashtable is a good bet</span><br />
<span class="irc-date">[17:35]</span> <span class="irc-black">&lt;slava&gt; but this is all conditional on the implementor choosing versatility over simplicity</span><br />
<span class="irc-date">[17:35]</span> <span class="irc-black">&lt;slava&gt; and performance over simplicity</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;slava&gt; so clearly I'm biased</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;naeu_&gt; my use of the phrase functional-fundamentalist is purely me paraphrasing Erik Meijer</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; naeu_: this is a long discussion. but basically my view is that shared nothing, process separation, is way to restricting</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; it feels the same as functional programming to me</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; "we can't figure out a good way of handling this, so lets throw out all mutabiliy"</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; that feels like giving up - not a solution</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; =)</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;naeu_&gt; why though? :-)</span><br />
<span class="irc-date">[17:36]</span> <span class="irc-black">&lt;olabini&gt; so I don't buy this whole concurrency-oriented programming thing</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;naeu_&gt; leave the parallel programming to languages good at it</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; naeu_: because it restricts me. it shouldn't have to</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;slava&gt; sort of "we can't figure out a good way to make dynamic languages fast, let's just rationalize and say perf doesn't matter" ;-)</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; hehe</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;slava&gt; naeu_: what if ola wants to make a parallel language?</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; slava: point</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;naeu_&gt; slava: that would be interesting</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; I don't necessarily want to make a parallel language</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; but it must be a part of it</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; otherwise the Java integration features won't work</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;naeu_&gt; i'm not trying to push anyone in any particular direction</span><br />
<span class="irc-date">[17:37]</span> <span class="irc-black">&lt;olabini&gt; but I can guarantee it won't be a necessary part</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;naeu_&gt; i just like the idea of having languages with special focusses and skills</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;olabini&gt; the JavaScript port will not have it, for example</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;olabini&gt; naeu_: I'm thinking about doing something akin to Io though. transparent futures will be pretty easy</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;olabini&gt; and is a good way to model many concurrency needs</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;slava&gt; naeu_: I like having an extensible language that presents the user with a small number of efficient and orthogonal primitives that can be combined in interesting ways</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;olabini&gt; but part of being expressive is to be expressive about doing things in paralell</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;naeu_&gt; i can totally imagine using clojure as the base language, and having threads of execution in other languages</span><br />
<span class="irc-date">[17:38]</span> <span class="irc-black">&lt;slava&gt; naeu_: that's more valuable than a splintering of special-purpose ad-hoc languages for different tasks</span><br />
<span class="irc-date">[17:39]</span> <span class="irc-black">&lt;naeu_&gt; slava: that's a very interesting point of view that definitely merits some grey-cell action</span><br />
<span class="irc-date">[17:40]</span> <span class="irc-black">&lt;olabini&gt; slava: in principle, I definitely agree with you</span><br />
<span class="irc-date">[17:40]</span> <span class="irc-black">&lt;slava&gt; naeu_: I've worked on 'multi-language' projects before, its mostly a disaster</span><br />
<span class="irc-date">[17:40]</span> <span class="irc-black">&lt;olabini&gt; in practice, Ioke is as much an experiment, as anything else</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;naeu_&gt; slava: but most projects do use multiple languages</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;slava&gt; Ioke is exactly the simpler super-flexible language that I think is good to use for all parts of a project</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;naeu_&gt; not necessarily multiple programming languages</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;slava&gt; naeu_: I'm not taking about SQL, CSS, etc</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;naeu_&gt; but definitely lots of little context specific languages</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;slava&gt; I reject the notion that you should use multiple general purpose languages for one project</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;naeu_&gt; particularly at the human level</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;olabini&gt; sorry, need to abandon this very interesting discussion at the moment</span><br />
<span class="irc-date">[17:41]</span> <span class="irc-black">&lt;olabini&gt; I'll be back when only one of you is standing. =)</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;naeu_&gt; olabini: take care :-)</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;slava&gt; like the old design where you use C++ as a base, with a scripting language on top</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;naeu_&gt; and it won't be me :-)</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;naeu_&gt; i'm just observing and interjecting accordingly</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;slava&gt; I think that's bullshit because if the scripting language was faster you woudnt need the C++</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;naeu_&gt; i wasn't standing in the first place ;-)</span><br />
<span class="irc-date">[17:42]</span> <span class="irc-black">&lt;slava&gt; the other pattern I dislike is using XML for configuration, because your language (Java, perhaps) doesn't have a good way to load source at runtime and represent structured data in code</span><br />
<span class="irc-date">[17:43]</span> <span class="irc-black">&lt;naeu_&gt; slava: but performance isn't everything</span><br />
<span class="irc-date">[17:43]</span> <span class="irc-black">&lt;naeu_&gt; and i totally agree with you about the hideousness of using XML for configuration: in that sense XML is the dynamic crutch for a far too static solution</span><br />
<span class="irc-date">[17:43]</span> <span class="irc-black">&lt;slava&gt; well, that's a side issue</span><br />
<span class="irc-date">[17:43]</span> <span class="irc-black">&lt;slava&gt; but many 3d games for instances are developed with the engine in C++ and scripting in lua</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;slava&gt; because there's no one language that combines the best properties of c++ and lua, in the domain of game development</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;slava&gt; that's suboptimal IMO</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;naeu_&gt; really?</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;naeu_&gt; but isn't an API a 'language' in a sense?</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;slava&gt; i'm talking about general purpose languages</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;naeu_&gt; surely the problem isn't 'game scripting' but 'the kind of scripting *my* game needs'</span><br />
<span class="irc-date">[17:44]</span> <span class="irc-black">&lt;slava&gt; not embedded DSLs</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; well, imagine if you could write the whole engine in lua</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; physics, graphics rendering, AI, sound, etc</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;naeu_&gt; so do you agree that embedded DSLs have value?</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; and have it run fast enough</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; of course</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; as far as I'm concerned an embedded DSL is just an API</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;naeu_&gt; but that's not possible right now (if ever)</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; and APIs certainly have value</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;slava&gt; naeu_: it would be possible if language implementors stopped saying that performance doesn't matter ;)</span><br />
<span class="irc-date">[17:45]</span> <span class="irc-black">&lt;naeu_&gt; the problem is that more abstract and dynamic languages don't talk nicely with hardware</span><br />
<span class="irc-date">[17:46]</span> <span class="irc-black">&lt;slava&gt; if you implement naively, sure</span><br />
<span class="irc-date">[17:46]</span> <span class="irc-black">&lt;naeu_&gt; do you think it's possible to manipulate a sufficiently abstract language to something that's performant on hardware?</span><br />
<span class="irc-date">[17:46]</span> <span class="irc-black">&lt;slava&gt; yes</span><br />
<span class="irc-date">[17:47]</span> <span class="irc-black">&lt;slava&gt; not just possible but its been done</span><br />
<span class="irc-date">[17:47]</span> <span class="irc-black">&lt;naeu_&gt; i think that's a beautiful goal</span><br />
<span class="irc-date">[17:47]</span> <span class="irc-black">&lt;naeu_&gt; which languages already have this?</span><br />
<span class="irc-date">[17:47]</span> <span class="irc-black">&lt;naeu_&gt; (i'm not trying to challenge you, I'm just very interested)</span><br />
<span class="irc-date">[17:47]</span> <span class="irc-black">&lt;slava&gt; common lisp, various schemes, and to a lesser extent factor</span><br />
<span class="irc-date">[17:48]</span> <span class="irc-black">&lt;naeu_&gt; oh ok, my naive brain thought lips were slow</span><br />
<span class="irc-date">[17:48]</span> <span class="irc-black">&lt;naeu_&gt; *lisps</span><br />
<span class="irc-date">[17:48]</span> <span class="irc-black">&lt;slava&gt; no</span><br />
<span class="irc-date">[17:48]</span> <span class="irc-black">&lt;naeu_&gt; and i thought factor was pretty fast because it's close to the language of hardware</span><br />
<span class="irc-date">[17:48]</span> <span class="irc-black">&lt;slava&gt; sbcl's compiler is quite advanced</span><br />
<span class="irc-date">[17:49]</span> <span class="irc-black">&lt;slava&gt; no, factor is very high level, lots of object allocation and dispatch, but the compiler makes it fast</span><br />
<span class="irc-date">[17:49]</span> <span class="irc-black">&lt;naeu_&gt; but these are just uninformed notions in my mind</span><br />
<span class="irc-date">[17:49]</span> <span class="irc-black">&lt;slava&gt; yes :)</span><br />
<span class="irc-date">[17:49]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[17:49]</span> <span class="irc-black">&lt;naeu_&gt; so do you believe in the notion of 'one true language'</span><br />
<span class="irc-date">[17:50]</span> <span class="irc-black">&lt;slava&gt; as long as it is flexible enough and fast enough</span><br />
<span class="irc-date">[17:50]</span> <span class="irc-black">&lt;naeu_&gt; interesting</span><br />
<span class="irc-date">[17:50]</span> <span class="irc-black">&lt;naeu_&gt; what drives these beliefs?</span><br />
<span class="irc-date">[17:50]</span> <span class="irc-black">&lt;naeu_&gt; do you have any analogies that you refer to?</span><br />
<span class="irc-date">[17:50]</span> <span class="irc-black">&lt;naeu_&gt; (the most basic and simple example I can think of is the proliferation of English)</span><br />
<span class="irc-date">[17:51]</span> <span class="irc-black">&lt;slava&gt; just practical experience implementing compilers and VMs, and reading books and papers on the topic</span><br />
<span class="irc-date">[17:52]</span> <span class="irc-black">&lt;naeu_&gt; so do you believe that current VMs and compilers are far too basic right now?</span><br />
<span class="irc-date">[17:52]</span> <span class="irc-black">&lt;slava&gt; no, JVM is quite advanced for instance, so is SBCL, LLVM, Ocaml, etc</span><br />
<span class="irc-date">[17:52]</span> <span class="irc-black">&lt;slava&gt; but most mainstream dynamic languages are implemented poorly, which drives people to believe that htere's a fundamental reason that high level languages cannot be fast, when this is demonstrably false</span><br />
<span class="irc-date">[17:52]</span> <span class="irc-black">&lt;naeu_&gt; which VM does factor target?</span><br />
<span class="irc-date">[17:53]</span> <span class="irc-black">&lt;slava&gt; x86 and powerpc</span><br />
<span class="irc-date">[17:53]</span> <span class="irc-black">&lt;naeu_&gt; straight to the metal :-)</span><br />
<span class="irc-date">[17:54]</span> <span class="irc-black">&lt;naeu_&gt; so, what are your current opinions of ioke?</span><br />
<span class="irc-date">[17:54]</span> <span class="irc-black">&lt;slava&gt; I really like the design of ioke. I think its a big improvement over io</span><br />
<span class="irc-date">[17:54]</span> <span class="irc-black">&lt;naeu_&gt; can you give some examples of why?</span><br />
<span class="irc-date">[17:55]</span> <span class="irc-black">&lt;naeu_&gt; and does the JVM help with any of these points</span><br />
<span class="irc-date">[17:55]</span> <span class="irc-black">&lt;slava&gt; well, it has lexical scope for one</span><br />
<span class="irc-date">[17:55]</span> <span class="irc-black">&lt;slava&gt; and lexical closures</span><br />
<span class="irc-date">[17:56]</span> <span class="irc-black">&lt;naeu_&gt; sure :-)</span><br />
<span class="irc-date">[17:57]</span> <span class="irc-black">&lt;naeu_&gt; do you have any ideas and insights into how we can improve the performance of ioke?</span><br />
<span class="irc-date">[17:57]</span> <span class="irc-black">&lt;slava&gt; no, sorry</span><br />
<span class="irc-date">[17:58]</span> <span class="irc-black">&lt;slava&gt; try to do more at compile time i guess</span><br />
<span class="irc-date">[17:58]</span> <span class="irc-black">&lt;slava&gt; languages where every call is a method dispatch are hard to optimize</span><br />
<span class="irc-date">[17:59]</span> <span class="irc-black">&lt;naeu_&gt; yeah, that's my gut feeling too</span><br />
<span class="irc-date">[18:00]</span> <span class="irc-black">&lt;naeu_&gt; it's one of the reasons I think it's interesting to ignore speed and concurrency and focus on flexibility</span><br />
<span class="irc-date">[18:00]</span> <span class="irc-black">&lt;slava&gt; implement some benchmarks and optimize the hot spots i guess</span><br />
<span class="irc-date">[18:00]</span> <span class="irc-black">&lt;naeu_&gt; i would love to see some flexibility benchmarks :-)</span><br />
<span class="irc-date">[18:02]</span> <span class="irc-black">&lt;naeu_&gt; i think one of the reasons why english is so easy to learn and use is due to its flexibility</span><br />
<span class="irc-date">[18:02]</span> <span class="irc-black">&lt;naeu_&gt; for example, contrast it to polish :-)</span><br />
<span class="irc-date">[18:03]</span> <span class="irc-black">&lt;naeu_&gt; polish (from my limited understanding) can be sooo more precise about things</span><br />
<span class="irc-date">[18:03]</span> <span class="irc-black">&lt;naeu_&gt; but it adds a lot of extra complication</span><br />
<span class="irc-date">[18:04]</span> <span class="irc-black">&lt;naeu_&gt; and I think that for the areas where software touches the real world, it needs to be as flexible as possible so that the software &lt;-&gt; world communication can be as friction-free as possible</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;naeu_&gt; although, that's clearly not the case if your'e writing a kernel or an implementation of map-reduce that can handle all the information on the internet</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;slava&gt; well</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;slava&gt; the thing then would be o pick a problem</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;slava&gt; and find a clean way to implement it in ioke</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;slava&gt; and compare with other languages</span><br />
<span class="irc-date">[18:05]</span> <span class="irc-black">&lt;naeu_&gt; i even think picking a problem wouldn't be enough</span><br />
<span class="irc-date">[18:06]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) Quit ()</span><br />
<span class="irc-date">[18:06]</span> <span class="irc-black">&lt;naeu_&gt; i feel that the power of a highly dynamic language lies in its ability to mutate easily</span><br />
<span class="irc-date">[18:06]</span> <span class="irc-black">&lt;naeu_&gt; and so as the world it's trying to communicate changes, it too can change with similar ease</span><br />
<span class="irc-date">[18:07]</span> <span class="irc-black">&lt;naeu_&gt; although, perhaps there is some sort of information meta-model underneath that doesn't change as much</span><br />
<span class="irc-date">[18:07]</span> <span class="irc-black">&lt;slava&gt; that's too abstract for me</span><br />
<span class="irc-date">[18:07]</span> <span class="irc-black">&lt;slava&gt; :)</span><br />
<span class="irc-date">[18:07]</span> <span class="irc-black">&lt;naeu_&gt; that more efficient mechanisms can manipulate</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;naeu_&gt; for example, the last project I worked on was a really trivial xml parsing issue</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;slava&gt; to be good, a language must enable you to write robust, maintainable code easily</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;slava&gt; there are many approaches</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;naeu_&gt; i had a crap load of xml that was delivered, which i needed to load into a database</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;naeu_&gt; and build a web shop on top of</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;slava&gt; runtime meta-programming is one but not the only one</span><br />
<span class="irc-date">[18:08]</span> <span class="irc-black">&lt;naeu_&gt; that itself isn't very difficult</span><br />
<span class="irc-date">[18:09]</span> <span class="irc-black">&lt;naeu_&gt; the problem was that the xml delivered, the model of the relationships between the entities the xml was representing changed frequently</span><br />
<span class="irc-date">[18:09]</span> <span class="irc-black">&lt;naeu_&gt; in fact, the schema wasn't finalised until a week before launch</span><br />
<span class="irc-date">[18:09]</span> <span class="irc-black">&lt;naeu_&gt; and so i needed a flexible way of dealing with these changes</span><br />
<span class="irc-date">[18:10]</span> <span class="irc-black">&lt;naeu_&gt; and i tackled this by separating the parts that changed frequently from the parts that didn't</span><br />
<span class="irc-date">[18:10]</span> <span class="irc-black">&lt;naeu_&gt; and implemented the parts that changed frequently in a really dynamic DSL-like way</span><br />
<span class="irc-date">[18:10]</span> <span class="irc-black">&lt;naeu_&gt; it worked really well</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;naeu_&gt; although the data import was crazy slow - that didn't matter</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;naeu_&gt; the client didn't really have much care in that</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;slava&gt; what does 'dynamic' mean to you</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;slava&gt; ?</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;naeu_&gt; slava: good question :-)</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;slava&gt; I see it get thrown around a lot</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;slava&gt; I guess it implies some form of runtime type checking, polymorphism or meta-programming</span><br />
<span class="irc-date">[18:11]</span> <span class="irc-black">&lt;naeu_&gt; i think i probably don't use it in a similar way most programmers might use it</span><br />
<span class="irc-date">[18:12]</span> <span class="irc-black">&lt;naeu_&gt; in mean it in terms of language malleability</span><br />
<span class="irc-date">[18:12]</span> <span class="irc-black">&lt;naeu_&gt; not in terms of implementation specifics</span><br />
<span class="irc-date">[18:12]</span> <span class="irc-black">&lt;slava&gt; so a language with no GC and no runtime types but with a powerful macro system would apply?</span><br />
<span class="irc-date">[18:12]</span> <span class="irc-black">&lt;naeu_&gt; sure</span><br />
<span class="irc-date">[18:12]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[18:13]</span> <span class="irc-black">&lt;naeu_&gt; but you also need to consider 'fit for purpose'</span><br />
<span class="irc-date">[18:13]</span> <span class="irc-black">&lt;naeu_&gt; for example although i argue that performance isn't as important as most of us think it is</span><br />
<span class="irc-date">[18:13]</span> <span class="irc-black">&lt;naeu_&gt; from a client's perspective</span><br />
<span class="irc-date">[18:14]</span> <span class="irc-black">&lt;naeu_&gt; 1s might be the same as 1 min, one hour or even one day</span><br />
<span class="irc-date">[18:14]</span> <span class="irc-black">&lt;naeu_&gt; but 100 days might not be appropriate</span><br />
<span class="irc-date">[18:14]</span> <span class="irc-black">&lt;naeu_&gt; and the same arguments apply to hardware resources</span><br />
<span class="irc-date">[18:14]</span> <span class="irc-black">&lt;slava&gt; I think the expressiveness of a language depends on how flexible it is and how fast it is</span><br />
<span class="irc-date">[18:14]</span> <span class="irc-black">&lt;slava&gt; ruby is not very expressive by this measure</span><br />
<span class="irc-date">[18:15]</span> <span class="irc-black">&lt;naeu_&gt; ruby isn't really that expressive in general</span><br />
<span class="irc-date">[18:15]</span> <span class="irc-black">&lt;slava&gt; if you have to rewrite the hotspots of your app in C -- which tend to be algorithmically complex, and would benefit most from a high level language -- what's the point?</span><br />
<span class="irc-date">[18:15]</span> <span class="irc-black">&lt;naeu_&gt; it just happens to be crazy expressive compared to Java</span><br />
<span class="irc-date">[18:15]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[18:15]</span> <span class="irc-black">&lt;naeu_&gt; people also seem to mistake language flexibility with syntax flexibility</span><br />
<span class="irc-date">[18:16]</span> <span class="irc-black">&lt;naeu_&gt; it just happens that syntax flexibility turns out to be really useful for radically improving the readability of the class of problems python and ruby can easily express</span><br />
<span class="irc-date">[18:16]</span> <span class="irc-black">&lt;naeu_&gt; which, for me,  makes ruby more expressive than python in this respect</span><br />
<span class="irc-date">[18:18]</span> <span class="irc-green">* travisennis_ (n=Travis@74-141-35-72.dhcp.insightbb.com) has joined #ioke</span><br />
<span class="irc-date">[18:18]</span> <span class="irc-black">&lt;slava&gt; DSLs are a hack in ruby though</span><br />
<span class="irc-date">[18:18]</span> <span class="irc-black">&lt;naeu_&gt; slava: yeah, totally</span><br />
<span class="irc-date">[18:18]</span> <span class="irc-black">&lt;slava&gt; since you're just overloading method dispatch semantics and abusing 'method not found'</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;slava&gt; there's no exposed AST so people concatenate strings and call 'eval' on them</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;naeu_&gt; but for simple cases they're fine :-)</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;slava&gt; and the parser is not extensible</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;slava&gt; and the whole th ing is really, really slow</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;naeu_&gt; yeah, totally slow</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;slava&gt; so ruby is not a very compelling language to me at all</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;naeu_&gt; but often that's not even a problem</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-black">&lt;naeu_&gt; the xml parse i eventually generated took an hour to parse the data</span><br />
<span class="irc-date">[18:19]</span> <span class="irc-green">* Narnach (n=narnach@195-241-27-75.ip.telfort.nl) has joined #ioke</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;naeu_&gt; it probably could easily be parsed in less than a minute</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;slava&gt; I'm interested in languages that are suitable for writing MPEG decoders, 3D engines, stuff like that</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;naeu_&gt; but the client only cared that it took less than 8 hours</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;slava&gt; not some trivial text parsing that takes an hour</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[18:20]</span> <span class="irc-black">&lt;naeu_&gt; i guess we have different definitions of trivial</span><br />
<span class="irc-date">[18:21]</span> <span class="irc-black">&lt;naeu_&gt; what may be programatically trivial isn't necessarily trivial from a problematic perspective</span><br />
<span class="irc-date">[18:21]</span> <span class="irc-black">&lt;Narnach&gt; Good evening!</span><br />
<span class="irc-date">[18:21]</span> <span class="irc-black">&lt;naeu_&gt; interfacing with the real world is a terrifying perspective for many</span><br />
<span class="irc-date">[18:21]</span> <span class="irc-black">&lt;naeu_&gt; Narnach: welcome :-)</span><br />
<span class="irc-date">[18:23]</span> <span class="irc-black">&lt;naeu_&gt; i wonder when (or if) we'll realise that performant programming and flexible programming aren't necessarily the same domains</span><br />
<span class="irc-date">[18:23]</span> <span class="irc-black">&lt;slava&gt; why should we realize that?</span><br />
<span class="irc-date">[18:23]</span> <span class="irc-black">&lt;naeu_&gt; well consider the difference between traditional maths and set theory</span><br />
<span class="irc-date">[18:24]</span> <span class="irc-black">&lt;naeu_&gt; they are both capable of representing the same thing</span><br />
<span class="irc-date">[18:24]</span> <span class="irc-black">&lt;naeu_&gt; but have very different expressive natures</span><br />
<span class="irc-date">[18:24]</span> <span class="irc-black">&lt;slava&gt; the thing is there's no reason a language cannot be fast and flexible</span><br />
<span class="irc-date">[18:25]</span> <span class="irc-black">&lt;slava&gt; its a false dilemma</span><br />
<span class="irc-date">[18:25]</span> <span class="irc-black">&lt;naeu_&gt; slava: isn't the potential speed of a language proportional to the difference in common abstraction from the actual machine hardware</span><br />
<span class="irc-date">[18:25]</span> <span class="irc-black">&lt;slava&gt; no</span><br />
<span class="irc-date">[18:25]</span> <span class="irc-black">&lt;naeu_&gt; interesting :-)</span><br />
<span class="irc-date">[18:25]</span> <span class="irc-black">&lt;naeu_&gt; i am hoping i'm wrong</span><br />
<span class="irc-date">[18:26]</span> <span class="irc-black">&lt;naeu_&gt; i guess my eyes aren't open enough yet</span><br />
<span class="irc-date">[18:26]</span> <span class="irc-black">&lt;naeu_&gt; although i also guess that'll always be the case no matter how much i try to open them</span><br />
<span class="irc-date">[18:27]</span> <span class="irc-black">&lt;naeu_&gt; slava: btw, where are you from?</span><br />
<span class="irc-date">[18:28]</span> <span class="irc-black">&lt;slava&gt; the thing is there's very little room for abstract philosophy in programming</span><br />
<span class="irc-date">[18:28]</span> <span class="irc-black">&lt;slava&gt; language design and implementation in particular</span><br />
<span class="irc-date">[18:28]</span> <span class="irc-black">&lt;slava&gt; its a very precise craft, lots of engineering and empirical measurement</span><br />
<span class="irc-date">[18:28]</span> <span class="irc-black">&lt;slava&gt; a lot is known about making fast GCs, fast compilers, etc</span><br />
<span class="irc-date">[18:29]</span> <span class="irc-black">&lt;naeu_&gt; slava: i heavily disagree with you on that respect</span><br />
<span class="irc-date">[18:30]</span> <span class="irc-black">&lt;naeu_&gt; philosophy slips into the smallest cracks of anything we care to design or create, no mater how much engineering and empirical measurement you care to use</span><br />
<span class="irc-date">[18:30]</span> <span class="irc-black">&lt;slava&gt; wel, for instance it doesn't make much sense to talk about language flexibility in the abstract</span><br />
<span class="irc-date">[18:30]</span> <span class="irc-black">&lt;naeu_&gt; of course it is!</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;slava&gt; what you can say, is, for a given program X, language feature Y makes the code easy/hard to express</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;slava&gt; or it makes the code easy/hard to maintain in the long run</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;slava&gt; or it makes it easy/hard to make the code efficient without losing maintainability and robustness</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;slava&gt; these things can be quantified</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;naeu_&gt; but what about how a language affects your ability to think</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;naeu_&gt; surely that's important</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;naeu_&gt; it's not just purely an engineering exercise</span><br />
<span class="irc-date">[18:31]</span> <span class="irc-black">&lt;slava&gt; for example, if your language lets you redefine + to mean -, that sure is flexible, but it has questionable benefits in practice</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;naeu_&gt; it's a matter of design too</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;slava&gt; a language shouldn't affect your ability to think, as much as allow you to program what you're thinking -- without having to contort your problem into the language's abstractions</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;naeu_&gt; yes, i agree with that</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;slava&gt; if I'm generating XML, I should be able to embed XML instead of making DOM nodes by hand</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;naeu_&gt; and that might be the closest definition of dynamic i can think of :-)</span><br />
<span class="irc-date">[18:32]</span> <span class="irc-black">&lt;slava&gt; if I'm doing vector math, I should be able to use vector and marix operations instead of writing lots of for loops</span><br />
<span class="irc-date">[18:33]</span> <span class="irc-black">&lt;naeu_&gt; totally</span><br />
<span class="irc-date">[18:33]</span> <span class="irc-black">&lt;slava&gt; if I'm writing a parser, I should be able to embed a BNF grammar in my source</span><br />
<span class="irc-date">[18:33]</span> <span class="irc-black">&lt;slava&gt; and not write a stupid parser by hand</span><br />
<span class="irc-date">[18:33]</span> <span class="irc-black">&lt;naeu_&gt; i totally agree</span><br />
<span class="irc-date">[18:34]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[18:34]</span> <span class="irc-black">&lt;slava&gt; idiomatic code should run fast too -- there shouldn't be any reason to rewrite code in a 'lower level style' or worse a lower level language to get performance</span><br />
<span class="irc-date">[18:34]</span> <span class="irc-black">&lt;naeu_&gt; yeah, that's a great goal</span><br />
<span class="irc-date">[18:34]</span> <span class="irc-black">&lt;slava&gt; the language should also prevent different modules from messing each other up</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;slava&gt; so if I change something in one part of the program</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;slava&gt; I don't have to worry that osmething unrelated broke</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;naeu_&gt; but the problem is that idiomatic code could be so far fetched from the idioms of machine hardware</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;naeu_&gt; i totally agree on the modularity aspect too</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;slava&gt; that doesn't matter</span><br />
<span class="irc-date">[18:35]</span> <span class="irc-black">&lt;naeu_&gt; in this sense Ruby is totally broken</span><br />
<span class="irc-date">[18:36]</span> <span class="irc-black">&lt;slava&gt; going to work, brb</span><br />
<span class="irc-date">[18:38]</span> <span class="irc-black">&lt;naeu_&gt; take care :-)</span><br />
<span class="irc-date">[18:38]</span> <span class="irc-black">&lt;naeu_&gt; and thanks very much for the interesting discussino</span><br />
<span class="irc-date">[18:38]</span> <span class="irc-black">&lt;naeu_&gt; *discussion</span><br />
<span class="irc-date">[18:38]</span> <span class="irc-black">&lt;naeu_&gt; I appreciate your time</span><br />
<span class="irc-date">[18:40]</span> <span class="irc-navy">* travisennis_ (n=Travis@74-141-35-72.dhcp.insightbb.com) Quit ("Leaving")</span><br />
<span class="irc-date">[18:42]</span> <span class="irc-black">&lt;olabini&gt; interesting. I'm not going to address all these points in retrospect.</span><br />
<span class="irc-date">[18:42]</span> <span class="irc-black">&lt;olabini&gt; I'll just comment that I agree in principle with most of the things Slava say.</span><br />
<span class="irc-date">[18:43]</span> <span class="irc-black">&lt;olabini&gt; and with respect to Ioke, I guess my thinking is that what I define as expressability must come before performance</span><br />
<span class="irc-date">[18:43]</span> <span class="irc-green">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) has joined #ioke</span><br />
<span class="irc-date">[18:44]</span> <span class="irc-black">&lt;olabini&gt; that isn't saying performance isn't important. but that I must disregard performance. because that's how I'll see if there is anything about this whole 'being as expressible as possible' business.</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;naeu_&gt; the phrase i've been using in my head is 'preferment enough'</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;naeu_&gt; hmm</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;Narnach&gt; performant? :)</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;naeu_&gt; 'performent enough'</span><br />
<span class="irc-date">[19:08]</span> <span class="irc-black">&lt;naeu_&gt; how the hell do you spell that?</span><br />
<span class="irc-date">[19:09]</span> <span class="irc-black">&lt;naeu_&gt; Narnach: that sounds better :-0</span><br />
<span class="irc-date">[19:10]</span> <span class="irc-black">&lt;olabini&gt; performing enough... =)</span><br />
<span class="irc-date">[19:10]</span> <span class="irc-black">&lt;Narnach&gt; also quite useful I imagine</span><br />
<span class="irc-date">[19:11]</span> <span class="irc-black">&lt;slava&gt; olabini: how do you measure expressiveness?</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;naeu_&gt; slava: I have a paper on my desk waiting to be read 'on the expressive power of programming languages, Matthias Felleisen'</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;olabini&gt; slava: yeah, that's the crux, isn't it?</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;naeu_&gt; looks fairly interesting</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;olabini&gt; my very subjective answer is this:</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;naeu_&gt; but it looks like it talks about the availability of feature X in language Y</span><br />
<span class="irc-date">[19:16]</span> <span class="irc-black">&lt;slava&gt; he basically defines expressiveness by saying that language X is more expressive than Y if a local change to a program in X require sa global transform in Y</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;olabini&gt; when I can write what I think without having to do any real translation, that means it is expressive.</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;olabini&gt; the more translation and "rethinking" I have to do, the less expressive</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;slava&gt; so Scheme with call/cc is more expressive than C because in Scheme you can use continuations without doing a CPS transform of the whole program</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;naeu_&gt; olabini: i completely agree with that definition</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;olabini&gt; of course, that isn't at all a very useful definition</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;slava&gt; I think that's a useful definition</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;olabini&gt; that's how I think about it when designing features of Ioke</span><br />
<span class="irc-date">[19:17]</span> <span class="irc-black">&lt;slava&gt; nowadays people seem to associate expressiveness wit hruntime polymorphism, which I think is wrong</span><br />
<span class="irc-date">[19:18]</span> <span class="irc-black">&lt;naeu_&gt; olabini: when you say 'not useful' i guess you mean 'difficult to measure'?</span><br />
<span class="irc-date">[19:18]</span> <span class="irc-black">&lt;olabini&gt; naeu_: yes.</span><br />
<span class="irc-date">[19:19]</span> <span class="irc-black">&lt;olabini&gt; slava: true. runtime polymorphism can make it easy to express some things, though</span><br />
<span class="irc-date">[19:19]</span> <span class="irc-black">&lt;olabini&gt; I would say it is one way of getting more expressiveness, but definitely not the only way</span><br />
<span class="irc-date">[19:19]</span> <span class="irc-black">&lt;olabini&gt; or even necessarily the best way</span><br />
<span class="irc-date">[19:28]</span> <span class="irc-black">&lt;naeu_&gt; right i'm off out for a beer</span><br />
<span class="irc-date">[19:28]</span> <span class="irc-black">&lt;naeu_&gt; :-)</span><br />
<span class="irc-date">[19:29]</span> <span class="irc-black">&lt;naeu_&gt; Narnach: if you're in the area you're welcome to join</span><br />
<span class="irc-date">[19:29]</span> <span class="irc-black">&lt;naeu_&gt; cheerio</span><br />
<span class="irc-date">[19:29]</span> <span class="irc-black">&lt;Narnach&gt; naeu_: where will you be/</span><br />
<span class="irc-date">[19:29]</span> <span class="irc-black">&lt;naeu_&gt; near the baarsjes</span><br />
<span class="irc-date">[19:31]</span> <span class="irc-black">&lt;Narnach&gt; naeu_: sure, sounds good</span><br />
<span class="irc-date">[19:31]</span> <span class="irc-black">&lt;Narnach&gt; though I don't think I have been there</span><br />
<span class="irc-date">[19:32]</span> <span class="irc-black">&lt;naeu_&gt; would you like to join?</span><br />
<span class="irc-date">[19:32]</span> <span class="irc-black">&lt;Narnach&gt; yep, just tell me where to go :)</span><br />
<span class="irc-date">[19:39]</span> <span class="irc-navy">* naeu_ (n=sam@h253136.upc-h.chello.nl) Quit ()</span><br />
<span class="irc-date">[19:40]</span> <span class="irc-green">* FiXato (n=fixato@fixato.demon.nl) has joined #ioke</span><br />
<span class="irc-date">[19:42]</span> <span class="irc-navy">* Narnach (n=narnach@195-241-27-75.ip.telfort.nl) Quit ("Leaving...")</span><br />
<span class="irc-date">[20:01]</span> <span class="irc-navy">* mkrauskopf (n=mkrausko@195.47.79.66) Quit ("Leaving")</span><br />
<span class="irc-date">[20:50]</span> <span class="irc-black">&lt;olabini&gt; #ioke ... the channel where language discussions and beer dates happen</span><br />
<span class="irc-date">[20:57]</span> <span class="irc-green">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) has joined #ioke</span><br />
<span class="irc-date">[21:03]</span> <span class="irc-black">&lt;FiXato&gt; lol</span><br />
<span class="irc-date">[21:46]</span> <span class="irc-navy">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) Quit ()</span><br />
<span class="irc-date">[21:48]</span> <span class="irc-navy">* adakkak (n=adakkak@gres116.lis.illinois.edu) Quit (Read error: 104 (Connection reset by peer))</span><br />
<span class="irc-date">[22:01]</span> <span class="irc-green">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) has joined #ioke</span><br />
<span class="irc-date">[22:23]</span> <span class="irc-navy">* rfgpfeiffer (n=rfgpfeif@e178214014.adsl.alicedsl.de) Quit ()</span><br />
<span class="irc-date">[22:43]</span> <span class="irc-navy">* FiXato (n=fixato@fixato.demon.nl) Quit (wolfe.freenode.net irc.freenode.net)</span><br />
<span class="irc-date">[22:43]</span> <span class="irc-navy">* vincenz (n=vincenz@li23-146.members.linode.com) Quit (wolfe.freenode.net irc.freenode.net)</span><br />
<span class="irc-date">[22:44]</span> <span class="irc-green">* FiXato (n=fixato@fixato.demon.nl) has joined #ioke</span><br />
<span class="irc-date">[22:44]</span> <span class="irc-green">* vincenz (n=vincenz@li23-146.members.linode.com) has joined #ioke</span><br />
<span class="irc-date">[23:25]</span> <span class="irc-green">* bguthrie_ (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) has joined #ioke</span><br />
<span class="irc-date">[23:36]</span> <span class="irc-navy">* bguthrie (n=bguthrie@c-67-191-149-124.hsd1.ga.comcast.net) Quit (Read error: 110 (Connection timed out))</span><br />
